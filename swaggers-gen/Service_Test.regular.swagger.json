{
    "swagger": "2.0",
    "info": {
        "title": "Service Test Management",
        "description": "## TMF API Reference: TMF656 - Service Test Management\n\n### Release : 18.5 - December 2018\n\nService Test Management API goal is to provide the ability to manage tests of provisioned Services. \n\n### Resource \n- ServiceTest \n- ServiceTestSpecification\n\n### Operations\nService Test Management API performs the following operations on the resources :\n- Retrieve an entity or a collection of entities depending on filter criteria\n- Partial update of an entity (including updating rules)\n- Create an entity (including default values and creation rules)\n- Delete an entity (for administration purposes)\n- Manage notification of events",
        "version": "4.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/serviceTestManagement/v4/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "serviceTest"
        },
        {
            "name": "serviceTestSpecification"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/serviceTest": {
            "get": {
                "operationId": "listServiceTest",
                "summary": "List or find ServiceTest objects",
                "description": "This operation list or find ServiceTest entities",
                "tags": [
                    "serviceTest"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ServiceTest"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createServiceTest",
                "summary": "Creates a ServiceTest",
                "description": "This operation creates a ServiceTest entity.",
                "tags": [
                    "serviceTest"
                ],
                "parameters": [
                    {
                        "name": "serviceTest",
                        "description": "The ServiceTest to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceTest_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ServiceTest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/serviceTest/{id}": {
            "get": {
                "operationId": "retrieveServiceTest",
                "summary": "Retrieves a ServiceTest by ID",
                "description": "This operation retrieves a ServiceTest entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "serviceTest"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ServiceTest",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ServiceTest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchServiceTest",
                "summary": "Updates partially a ServiceTest",
                "description": "This operation updates partially a ServiceTest entity.",
                "tags": [
                    "serviceTest"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ServiceTest",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "serviceTest",
                        "description": "The ServiceTest to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceTest_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ServiceTest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteServiceTest",
                "summary": "Deletes a ServiceTest",
                "description": "This operation deletes a ServiceTest entity.",
                "tags": [
                    "serviceTest"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ServiceTest",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/serviceTestSpecification": {
            "get": {
                "operationId": "listServiceTestSpecification",
                "summary": "List or find ServiceTestSpecification objects",
                "description": "This operation list or find ServiceTestSpecification entities",
                "tags": [
                    "serviceTestSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ServiceTestSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createServiceTestSpecification",
                "summary": "Creates a ServiceTestSpecification",
                "description": "This operation creates a ServiceTestSpecification entity.",
                "tags": [
                    "serviceTestSpecification"
                ],
                "parameters": [
                    {
                        "name": "serviceTestSpecification",
                        "description": "The ServiceTestSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/serviceTestSpecification/{id}": {
            "get": {
                "operationId": "retrieveServiceTestSpecification",
                "summary": "Retrieves a ServiceTestSpecification by ID",
                "description": "This operation retrieves a ServiceTestSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "serviceTestSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ServiceTestSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchServiceTestSpecification",
                "summary": "Updates partially a ServiceTestSpecification",
                "description": "This operation updates partially a ServiceTestSpecification entity.",
                "tags": [
                    "serviceTestSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ServiceTestSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "serviceTestSpecification",
                        "description": "The ServiceTestSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteServiceTestSpecification",
                "summary": "Deletes a ServiceTestSpecification",
                "description": "This operation deletes a ServiceTestSpecification entity.",
                "tags": [
                    "serviceTestSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ServiceTestSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceTestCreateNotification": {
            "post": {
                "operationId": "listenToServiceTestCreateNotification",
                "summary": "Client listener for entity ServiceTestCreateNotification",
                "description": "Example of a client listener for receiving the notification ServiceTestCreateNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ServiceTestCreateNotification"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceTestAttributeValueChangeNotification": {
            "post": {
                "operationId": "listenToServiceTestAttributeValueChangeNotification",
                "summary": "Client listener for entity ServiceTestAttributeValueChangeNotification",
                "description": "Example of a client listener for receiving the notification ServiceTestAttributeValueChangeNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ServiceTestAttributeValueChangeNotification"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceTestDeleteNotification": {
            "post": {
                "operationId": "listenToServiceTestDeleteNotification",
                "summary": "Client listener for entity ServiceTestDeleteNotification",
                "description": "Example of a client listener for receiving the notification ServiceTestDeleteNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ServiceTestDeleteNotification"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceTestSpecificationCreateNotification": {
            "post": {
                "operationId": "listenToServiceTestSpecificationCreateNotification",
                "summary": "Client listener for entity ServiceTestSpecificationCreateNotification",
                "description": "Example of a client listener for receiving the notification ServiceTestSpecificationCreateNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecificationCreateNotification"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceTestSpecificationAttributeValueChangeNotification": {
            "post": {
                "operationId": "listenToServiceTestSpecificationAttributeValueChangeNotification",
                "summary": "Client listener for entity ServiceTestSpecificationAttributeValueChangeNotification",
                "description": "Example of a client listener for receiving the notification ServiceTestSpecificationAttributeValueChangeNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecificationAttributeValueChangeNotification"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/serviceTestSpecificationDeleteNotification": {
            "post": {
                "operationId": "listenToServiceTestSpecificationDeleteNotification",
                "summary": "Client listener for entity ServiceTestSpecificationDeleteNotification",
                "description": "Example of a client listener for receiving the notification ServiceTestSpecificationDeleteNotification",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecificationDeleteNotification"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Any": {},
        "AppliedConsequence": {
            "type": "object",
            "description": "An Applied Consequence defines the action (prescribed action or notification) to take when a \nMeasureThresholdRuleViolation occurs.",
            "properties": {
                "appliedAction": {
                    "type": "string",
                    "description": "The action for a violated threshold. This could be a hyperlink to \nthe action."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the consequence is."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which Consequence is known and \ndistinguished from other MetricDefMeasureConsequences."
                },
                "repeatAction": {
                    "type": "boolean",
                    "description": "An indicator use to specify that a consequence should cease \nbeing applied if a value is in the same range as the previous value or continue being applied if a value is in the same range as the previous value.  \nIf the repeatAction is True, if the consequence is always applied as soon as the MetricMeasure value is in the range of values and if the repeatAction is False, the consequence is applied only if the previous MetricMeasure value was not in the same range."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Characteristic": {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the characteristic"
                },
                "valueType": {
                    "type": "string",
                    "description": "Data type of the value of the characteristic"
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "The value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Duration": {
            "type": "object",
            "description": "A time interval in a given unit of time",
            "properties": {
                "amount": {
                    "type": "integer",
                    "description": "Time interval (number of seconds, minutes, hours, etc.)"
                },
                "units": {
                    "type": "string",
                    "description": "Unit of time (seconds, minutes, hours, etc.)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "MeasureThresholdRuleViolation": {
            "type": "object",
            "description": "A measureThresholdRuleViolation is a violation of a rule that defines the in the \nMericDefMeasureThresholdRule.",
            "properties": {
                "conformanceComparatorLower": {
                    "type": "string",
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetLower."
                },
                "conformanceComparatorUpper": {
                    "type": "string",
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetUpper."
                },
                "conformanceTargetLower": {
                    "type": "string",
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the lower limit. The value should be less than the conformanceTargetUpper. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                },
                "conformanceTargetUpper": {
                    "type": "string",
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the Upper limit. The value should be greater than the conformanceTargetLower. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                },
                "description": {
                    "type": "string",
                    "description": "Description for the MetricDefMeasureThresholdRule ."
                },
                "name": {
                    "type": "string",
                    "description": "Name for the MetricDefMeasureThresholdRule ."
                },
                "numberOfAllowedCrossing": {
                    "type": "integer",
                    "description": "The number of allowed crossing occurrences in reference to the \ntolerancePeriod without a consequence being initiated."
                },
                "thresholdRuleSeverity": {
                    "type": "string",
                    "description": "A threshold can be generated in different severity levels. A \ncrossing for each level may require a different condition and possibly trigger a different consequence."
                },
                "appliedConsequence": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppliedConsequence"
                    },
                    "description": "An Applied Consequence defines the action (prescribed action or notification) to take when a MeasureThresholdRuleViolation occurs."
                },
                "tolerancePeriod": {
                    "$ref": "#/definitions/Duration",
                    "description": "An interval of time of allowed crossing occurrences before a \nconsequence being initiated."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "MetricDefMeasureConsequence": {
            "type": "object",
            "description": "A MetricDefMeasureConsequence defines the action (prescribed action or notification) to take when a \nMetricDefMeasureThresholdRule is crossed.",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the consequence is."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a \nMetricDefMeasureConsequence is known and distinguished from other MetricDefMeasureConsequences."
                },
                "prescribeAction": {
                    "type": "string",
                    "description": "Recommended remedy for a violated threshold. This could be \nthe hyperlink to the action."
                },
                "repeatAction": {
                    "type": "boolean",
                    "description": "An indicator use to specify that a consequence should cease \nbeing applied if a value is in the same range as the previous value  or continue being applied if a value is in the same range as the previous value.   \nIf the repeatAcation is True, if the consequence is always applied as soon as the MetricMeasure value is in the range of values and if the repeatAcation is False, the consequence is applied only if the previous MetricMeasure value wasn\u00a1\u00aft in the same range."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "A valid duration of a thing."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "MetricDefMeasureThresholdRule": {
            "type": "object",
            "description": "A MetricDefMeasureThresholdRule is a rule that defines the condition (raise or clear) to achieve to apply \nconsequences when a threshold is crossed or ceased to be crossed. It also defines the severity of the \nraise or clear of the threshold.",
            "properties": {
                "conformanceComparatorLower": {
                    "type": "string",
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to Service Test Management API REST Specification compare with the conformanceTargetLower."
                },
                "conformanceComparatorUpper": {
                    "type": "string",
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetUpper."
                },
                "conformanceTargetLower": {
                    "type": "string",
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the lower limit. The value should be less than the conformanceTargetUpper. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                },
                "conformanceTargetUpper": {
                    "type": "string",
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the Upper limit. The value should be greater than the conformanceTargetLower. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                },
                "description": {
                    "type": "string",
                    "description": "Description for the MetricDefMeasureThresholdRule ."
                },
                "name": {
                    "type": "string",
                    "description": "Name for the MetricDefMeasureThresholdRule ."
                },
                "numberOfAllowedCrossing": {
                    "type": "integer",
                    "description": "The number of allowed crossing occurrences in reference to the \ntolerancePeriod without a consequence being initiated."
                },
                "thresholdRuleSeverity": {
                    "type": "string",
                    "description": "A threshold can be generated in different severity levels. A \ncrossing for each level may require a different condition and possibly trigger a different consequence."
                },
                "consequence": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MetricDefMeasureConsequence"
                    },
                    "description": "A list of consequences (actions, notifications) that will arise if the threshold is crossed"
                },
                "tolerancePeriod": {
                    "$ref": "#/definitions/Duration",
                    "description": "An interval of time of allowed crossing occurrences before a consequence being initiated."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceRef": {
            "type": "object",
            "description": "Service reference, for when Service is used by other entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the service"
                },
                "href": {
                    "type": "string",
                    "description": "reference of the service"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id",
                "href"
            ]
        },
        "ServiceSpecificationRef": {
            "type": "object",
            "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service specification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the serviceSpecification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the requiredServiceSpecification"
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id",
                "href"
            ]
        },
        "ServiceTest": {
            "type": "object",
            "description": "A service test is an entity that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the service test"
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink to access the service test"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the service test"
                },
                "endDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date and time of the service test"
                },
                "mode": {
                    "type": "string",
                    "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service test"
                },
                "startDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date and time of the service test."
                },
                "state": {
                    "type": "string",
                    "description": "The actual state the service test is in"
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "List of characteristics with values that define the test run"
                },
                "relatedService": {
                    "$ref": "#/definitions/ServiceRef",
                    "description": "The actual service being tested"
                },
                "testMeasure": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TestMeasure"
                    },
                    "description": "The results of the test in terms of the measured metrics"
                },
                "testSpecification": {
                    "$ref": "#/definitions/ServiceTestSpecificationRef",
                    "description": "The specification for this test"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceTest_Create": {
            "type": "object",
            "description": "A service test is an entity that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.\nSkipped properties: id,href",
            "required": [
                "name",
                "relatedService",
                "testSpecification"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service test"
                },
                "endDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date and time of the service test"
                },
                "mode": {
                    "type": "string",
                    "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service test"
                },
                "startDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date and time of the service test."
                },
                "state": {
                    "type": "string",
                    "description": "The actual state the service test is in"
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "List of characteristics with values that define the test run"
                },
                "relatedService": {
                    "$ref": "#/definitions/ServiceRef",
                    "description": "The actual service being tested"
                },
                "testMeasure": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TestMeasure"
                    },
                    "description": "The results of the test in terms of the measured metrics"
                },
                "testSpecification": {
                    "$ref": "#/definitions/ServiceTestSpecificationRef",
                    "description": "The specification for this test"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceTest_Update": {
            "type": "object",
            "description": "A service test is an entity that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.\nSkipped properties: id,href",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service test"
                },
                "endDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date and time of the service test"
                },
                "mode": {
                    "type": "string",
                    "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service test"
                },
                "startDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date and time of the service test."
                },
                "state": {
                    "type": "string",
                    "description": "The actual state the service test is in"
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "List of characteristics with values that define the test run"
                },
                "relatedService": {
                    "$ref": "#/definitions/ServiceRef",
                    "description": "The actual service being tested"
                },
                "testMeasure": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TestMeasure"
                    },
                    "description": "The results of the test in terms of the measured metrics"
                },
                "testSpecification": {
                    "$ref": "#/definitions/ServiceTestSpecificationRef",
                    "description": "The specification for this test"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceTestSpecification": {
            "type": "object",
            "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of a service test specification."
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink to access a service test specification."
                },
                "description": {
                    "type": "string",
                    "description": "Description of a service test specification."
                },
                "name": {
                    "type": "string",
                    "description": "Name of a service test specification."
                },
                "version": {
                    "type": "string",
                    "description": "Version of a service test specification "
                },
                "relatedServiceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The related service specification."
                },
                "testMeasureDefinition": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TestMeasureDefinition"
                    },
                    "description": "A list of definitions for the measurements for the test defined by this specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which this specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceTestSpecification_Create": {
            "type": "object",
            "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.\nSkipped properties: id,href",
            "required": [
                "name",
                "relatedServiceSpecification"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of a service test specification."
                },
                "name": {
                    "type": "string",
                    "description": "Name of a service test specification."
                },
                "version": {
                    "type": "string",
                    "description": "Version of a service test specification "
                },
                "relatedServiceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The related service specification."
                },
                "testMeasureDefinition": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TestMeasureDefinition"
                    },
                    "description": "A list of definitions for the measurements for the test defined by this specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which this specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceTestSpecification_Update": {
            "type": "object",
            "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.\nSkipped properties: id,href,validFor",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of a service test specification."
                },
                "name": {
                    "type": "string",
                    "description": "Name of a service test specification."
                },
                "version": {
                    "type": "string",
                    "description": "Version of a service test specification "
                },
                "relatedServiceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The related service specification."
                },
                "testMeasureDefinition": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TestMeasureDefinition"
                    },
                    "description": "A list of definitions for the measurements for the test defined by this specification"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceTestSpecificationRef": {
            "type": "object",
            "description": "The service test specification used by the service test.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of a service test specification."
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink to access a service test specification."
                },
                "version": {
                    "type": "string",
                    "description": "Version of a service test specification "
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id",
                "href"
            ]
        },
        "TargetServiceSchema": {
            "type": "object",
            "description": "The reference object to the schema and type of target service which is described by service specification",
            "required": [
                "@schemaLocation",
                "@type"
            ],
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "This field provides a link to the schema describing the target service"
                },
                "@type": {
                    "type": "string",
                    "description": "Class type of the target service"
                }
            }
        },
        "TestMeasure": {
            "type": "object",
            "description": "A TestMeasure specifies a measure of a specific aspect of a product, service, or resource test, such as lost packets or connectivity status",
            "properties": {
                "accuracy": {
                    "type": "number",
                    "format": "float",
                    "description": "The number of digits of accuracy captured for associated Metrics"
                },
                "captureDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time that the metric was captured"
                },
                "captureMethod": {
                    "type": "string",
                    "description": "The method used to capture the Metrics (This may be replaced by a set of entities similar to the Performance Monitoring Ref)"
                },
                "metricDescription": {
                    "type": "string",
                    "description": "Brief description of the metric"
                },
                "metricHref": {
                    "type": "string",
                    "description": "Hyperlink to access a metric for detail information"
                },
                "metricName": {
                    "type": "string",
                    "description": "The name of the metric"
                },
                "unitOfMeasure": {
                    "type": "string",
                    "description": "The unit of measure for the metric values, such as meters, cubic yards, kilograms [ISO 1000]."
                },
                "ruleViolation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MeasureThresholdRuleViolation"
                    },
                    "description": "A list of rules that were violated in this test measure"
                },
                "value": {
                    "$ref": "#/definitions/Characteristic",
                    "description": "The value of Metric in the test. This also could be a document to record all values captured during the service test"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "TestMeasureDefinition": {
            "type": "object",
            "description": "A TestMeasureDefinition specifies a measure of a specific aspect of a product, service, or resource test, such as lost packets or connectivity status",
            "properties": {
                "captureFrequency": {
                    "type": "string",
                    "description": "The frequency of capture for the metric. Note: This may be replaced by a set of entities similar to the Performance Monitoring"
                },
                "captureMethod": {
                    "type": "string",
                    "description": "The method used to capture the Metric. Note: This may be replaced by a set of entities similar to the Performance Monitoring"
                },
                "metricDescription": {
                    "type": "string",
                    "description": "Brief description of the metric"
                },
                "metricHref": {
                    "type": "string",
                    "description": "Hyperlink to access a metric for detail information"
                },
                "metricName": {
                    "type": "string",
                    "description": "The name of a metric that in the test measure"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the TestMeasureDefinition"
                },
                "unitOfMeasure": {
                    "type": "string",
                    "description": "Name of a service test specification"
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the Metric value can take on, such as numeric, text, and so forth"
                },
                "capturePeriod": {
                    "$ref": "#/definitions/Duration",
                    "description": "A period of the capture"
                },
                "thresholdRule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MetricDefMeasureThresholdRule"
                    },
                    "description": "The rule(s) associated with the measure threshold"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The time period for which this definition is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "ServiceTestCreateNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceTestCreateEvent"
                }
            }
        },
        "ServiceTestCreateEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceTest": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceTest"
                }
            }
        },
        "ServiceTestAttributeValueChangeNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceTestAttributeValueChangeEvent"
                }
            }
        },
        "ServiceTestAttributeValueChangeEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceTest": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceTest"
                }
            }
        },
        "ServiceTestDeleteNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceTestDeleteEvent"
                }
            }
        },
        "ServiceTestDeleteEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceTest": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceTest"
                }
            }
        },
        "ServiceTestSpecificationCreateNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceTestSpecificationCreateEvent"
                }
            }
        },
        "ServiceTestSpecificationCreateEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceTestSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceTestSpecification"
                }
            }
        },
        "ServiceTestSpecificationAttributeValueChangeNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceTestSpecificationAttributeValueChangeEvent"
                }
            }
        },
        "ServiceTestSpecificationAttributeValueChangeEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceTestSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceTestSpecification"
                }
            }
        },
        "ServiceTestSpecificationDeleteNotification": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification"
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification"
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification"
                },
                "resourcePath": {
                    "type": "string",
                    "description": "The path identifying the resource object concerned by this notification"
                },
                "event": {
                    "description": "The event linked to the involved resource object",
                    "$ref": "#/definitions/ServiceTestSpecificationDeleteEvent"
                }
            }
        },
        "ServiceTestSpecificationDeleteEvent": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "serviceTestSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ServiceTestSpecification"
                }
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "integer",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}